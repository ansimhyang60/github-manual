[3월 15일 git 강의 요약]
1. 웹브라우저에서 git 계정을 우선 만들자. 첫단계!
(일단 내 PC에서 작업)
2. mkdir my_git : 내 작업 디렉토리
3. git init : 초기화. .git이 트레킹 된다.(사실 안보임)
4. test.txt를 만들고 추적을 해보자 git add test.txt  --> 이제부터 .git 안에서 이 파일은 추적관리가 된다.
5. git commit -m "commit #1"   -->   내 작업 디렉토리에 변경 저장. 아직 git에는 안 올라갔음(중요함). "(나만의 메시지)" 임 명심.
6. git remote add origin https:// 내가 변경한 파일들 올릴 git 계정 디렉토리(repository) (자, 이미 만들었다고 간주 하고 계속 진행)
7. git remote -v 로 나와 repository 연결관계 확인하는 명령어(참고용)
8. 참고로 master 와 branch(가지치기-bugfix, update..)는 구분할 것(개념 잡고서)  : master는 최종완성(제출용)이라고 생각
9. 접속(로그인)은 git에서 내 로컬 계정에 인증토큰을 보내서  인증하는 개선된 방식임(ID/PWD 보다 강화된)

10. git commit -m "commiit #3"  -->  git push : 이제야 내 파일이 git repository에 올라감.
11. 즉, 10번에서 내가 내 PC에서 test.txt 변경/추가 후 git push 하면 git에 변경이 반영됨(이제 3번째 변경이라는 나만의 메시지)
12. 웹브라우저 git에서 메뉴버튼 'Fork'는 git clone 이고 내 PC로 가져오는 복사임.
13. git pull은 반대로 가져오는 것임. (일반적으로 내 PC에서 변경/삭제하고 commit 해야 repository에 반영됨)
14. git add .  -->   git commit -m "commit #5" -->  git push  (한 개인 작업 흐름/방식)  누구든 자기 PC에서 commit 가능함. 그래서 같은 파일 충돌 가능성도 있음.

15. conflict(충돌)은 수작업으로 해결해야 하는 머리아픈 작업임. 과연 누구의 코드(라인)를 선택할 것인가 다 살펴봐야 함
16. Visual studio code는 충돌 파일을 양쪽에 나란히 펼쳐서 비교 가능함(편리한 기능!)
17. branch는 원본 master를 훼손하지 않고 따로 복사해서 작업하는 (나만의) 공간임. --> git  branch master / git checkout master 
18. 'Pull request'란 branch와 master를 하나로 합치는 작업이고 요청하면 (리더가) 수락하는 방식
19. 리더는 merge(합치기)할지 reject(거절, 반려) 할지 선택을 해서 결정함 : 실무에서는 한달 내내 욕먹으면서 reject 당할 수도 있음

20. 코드를 일단 받으면 git pull 하는 습관을 가져서 동기화 먼저 할 것(Already up to date 확인)
21. 배우는 학생들은 git pull 을 잘 하면 됨. 공통 작업이 아니므로. 
22. 명령어 없이 쓰는 추천툴은 : Sourcetree 임 https://sourcetreeapp.com/
23. 팀 단위로 git 사용은 필수임.
